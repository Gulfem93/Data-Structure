#include<stdio.h>
#include<stdlib.h>

#define N 6

bool visited[N];

int dizi[N][N] = {{0, 1, 1, 0, 0, 0},
				  {1, 0, 0, 1, 0, 0},
				  {1, 0, 0, 1, 0, 0},
				  {0, 1, 1, 0, 1, 0},
				  {0, 0, 0, 1, 0, 1},
				  {0, 0, 0, 0, 1, 0}};

typedef struct Node
{
	int sayi;
	Node *next;
};

Node *first = NULL;
Node *last = NULL;

Node *create(int x)
{
	Node *newNode = (Node*)malloc(sizeof(Node));
	newNode->sayi = x;
	newNode->next = NULL;
	return newNode;
}

void Enqueue(int x)
{
	Node *gecici = create(x);
	
	if(first == NULL)
	{
		first = gecici;
		last = gecici;
	}
	else
	{
		last->next = gecici;
		last = gecici;
	}
}

void Denqueue()
{
	Node *gecici;
	if(first == NULL)
	{
		return;
	}
	else if(first->next == NULL)
	{
		first = NULL;
		last = NULL;
	}
	else
	{
		gecici = first->next; 
		free(first);
		first = gecici;
	}
}

void BFS(int root)
{
	/*visited[root] = true  -->  ilk eleman eklendi
	  Enqueue(root)         --> ilk eleman stacka eklendi
	*/
	visited[root] = true;
	Enqueue(root);
	
	while(first != false)
	{
		root = first->sayi;	
		printf("%d ", root);
		Denqueue();
		/*
			|   | denqueue |   |		--> ör: enque(2) stack eklendi
			|   | -------> |   |				denqueue() stackden çıkarıldı
			|_2_|	       |___|
		*/
		
		for(int i=0; i<N; i++)
		{
			/* visited[i] == false  --> hiçbir yeri ziyaret etmediyse
			   dizi[root][i] == 1   --> Komşuları var ise
			*/
			if(visited[i] == false && dizi[root][i] == 1)
			{
				visited[i] = true;
				Enqueue(i);
			}
		}
	}
	
}

int main()
{
	for(int i = 0; i < N; i++)
	{
		visited[i] = false;
	}
	
	printf(" BFS = ");
	BFS(3);
	return 0;
}
